--Este script foi feito para criar as tabelas e os tipos utilizados no nosso programa.

CREATE EXTENSION pgcrypto;

--Tipos de dados novos criados para usos específicos na base de dados, como definir uma classe do personagem
--definir uma especialização, ou definir uma raridade.
CREATE TYPE CLASSEPERSONAGEM AS ENUM ('MAGO', 'GUERREIRO', 'ATIRADOR', 'CURANDEIRO');
CREATE TYPE ESPECIALIZACAOPERSONAGEM AS ENUM ('COMERCIANTE', 'DIPLOMATA');
CREATE TYPE RARIDADE AS ENUM ('COMUM', 'INCOMUM', 'RARO', 'EPICO', 'LENDARIO');

CREATE TABLE USUARIO (
  NOME VARCHAR(64),
  EMAIL VARCHAR(64) NOT NULL,
  DATA_DE_CRIACAO TIMESTAMP NOT NULL DEFAULT NOW(), --Timestamp utilizado para armazenar momento exato da criação.
  SENHA CHAR(60) NOT NULL, -- A senha precisa ter exatamente 60 caracteres porque ela vai estar criptografada usando crypt() com salt do tipo 'bf'
  MODERADOR BOOLEAN NOT NULL DEFAULT FALSE,
  ACONSELHADOR VARCHAR(64),

  CONSTRAINT PK_USUARIO PRIMARY KEY (NOME),
  CONSTRAINT SK_USUARIO UNIQUE (EMAIL),

  CONSTRAINT FK_USUARIO_USUARIO
    FOREIGN KEY (ACONSELHADOR) REFERENCES USUARIO(NOME) ON DELETE RESTRICT,

  CONSTRAINT CK_USUARIO_EMAIL CHECK (EMAIL ~ '\w+@(\w+.?)+' ), --Checar se o formato do EMAIL é válido.
  CONSTRAINT CK_USUARIO_NOME_ACONSELHADOR CHECK (NOME <> ACONSELHADOR) --Checar se o usuário não aconselha ele mesmo.
);

CREATE TABLE NACAO (
  NOME VARCHAR(32),

  CONSTRAINT PK_NACAO PRIMARY KEY (NOME)
);

CREATE TABLE CLA (
  NACAO VARCHAR(32),
  NOME VARCHAR(32),

  CONSTRAINT PK_CLA PRIMARY KEY (NACAO, NOME),

  CONSTRAINT FK_CLA_NACAO FOREIGN KEY (NACAO)
    REFERENCES NACAO(NOME) ON DELETE CASCADE
);

CREATE TABLE PERSONAGEM (
  ID SERIAL, --Tipo SERIAL é utilizado para criação de um ID sintético sequencial único para toda criação.
  NOME VARCHAR(32) NOT NULL,
  NACAO VARCHAR(32) NOT NULL,
  USUARIO VARCHAR(50) NOT NULL,
  PONTOS_DE_PODER NUMERIC NOT NULL,
  VIDA_MAXIMA NUMERIC NOT NULL DEFAULT 100,
  DINHEIRO NUMERIC NOT NULL DEFAULT 0,
  CLASSE CLASSEPERSONAGEM NOT NULL, --Tipo ENUM criado para definir classes dos personagens.
  HISTORIA TEXT, --Tipo TEXT utilizado para escrever uma história de tamanho grande.
  EXPERIENCIA NUMERIC NOT NULL DEFAULT 0,
  NACAO_DO_CLAN VARCHAR(32),
  NOME_DO_CLAN VARCHAR(32),
  ESPECIALIZACAO ESPECIALIZACAOPERSONAGEM, --Tipo ENUM criado para definir especializações dos personagens.

  CONSTRAINT PK_PERSONAGEM PRIMARY KEY (ID),
  CONSTRAINT SK_PERSONAGEM UNIQUE (NOME, USUARIO),

  CONSTRAINT FK_PERSONAGEM_CLAN FOREIGN KEY (NACAO_DO_CLAN, NOME_DO_CLAN)
    REFERENCES CLA(NACAO, NOME) ON DELETE SET NULL,
  CONSTRAINT FK_PERSONAGEM_NACAO FOREIGN KEY (NACAO)
    REFERENCES NACAO(NOME) ON DELETE CASCADE,
  CONSTRAINT FK_PERSONAGEM_USUARIO FOREIGN KEY (USUARIO)
    REFERENCES USUARIO(NOME) ON DELETE CASCADE,

  CONSTRAINT CK_NACAO_CLAN_PERSONAGEM CHECK(NACAO_DO_CLAN IS NULL OR NACAO_DO_CLAN=NACAO) --Checar se o personagem é da mesma nação do clã que faz parte.
);

CREATE TABLE ITEM (
  NOME VARCHAR(64) NOT NULL,
  DESCRICAO TEXT NOT NULL DEFAULT '',
  RARIDADE RARIDADE DEFAULT 'COMUM', --Tipo RARIDADE é um ENUM utilizado para representar a raridade de um item ou monstro.
  VALOR_REAL NUMERIC NOT NULL,
  TIPO VARCHAR(16),

  CONSTRAINT PK_ITEM PRIMARY KEY(NOME),

  CONSTRAINT CK_ITEM_VALOR CHECK(VALOR_REAL > 0), --Checar se o valor do item é positivo para evitar inconcistências.
  CONSTRAINT CK_ITEM_TIPO CHECK(UPPER(TIPO) IN ('EQUIPAMENTO', 'CONSUMIVEL'))
);

CREATE TABLE MONSTRO (
  NOME VARCHAR(64) NOT NULL,
  VIDA_MAXIMA NUMERIC NOT NULL,
  PONTOS_PODER NUMERIC NOT NULL,
  RARIDADE RARIDADE DEFAULT 'COMUM',
  HABILIDADE VARCHAR(32) DEFAULT 'NENHUMA',
  EXP_GERADO NUMERIC NOT NULL,

  CONSTRAINT PK_MONSTRO PRIMARY KEY(NOME),

  CONSTRAINT CK_MONSTRO_VIDA CHECK (VIDA_MAXIMA > 0), --Checar se a vida máxima do monstro é positiva.
  CONSTRAINT CK_MONSTRO_PONTOS_PODER CHECK (PONTOS_PODER > 0), --Checar se os pontos de poder são positivos.
  CONSTRAINT CK_MONSTRO_EXP_GERADO CHECK (EXP_GERADO >= 0) --Checar se EXP_GERADO é não negativo.
);

CREATE TABLE MASMORRA (
  NOME VARCHAR(64) NOT NULL,
  LOCAL VARCHAR(64),

  CONSTRAINT PK_MASMORRA PRIMARY KEY(NOME)
);

CREATE TABLE MISSAO (
  NOME VARCHAR(64) NOT NULL,
  DIFICULDADE VARCHAR(16) NOT NULL,
  EXP_GERADO NUMERIC NOT NULL,
  TEMPO_FINALIZAR INTERVAL HOUR TO SECOND,
  MASMORRA VARCHAR(64) NOT NULL,

  CONSTRAINT PK_MISSAO PRIMARY KEY(NOME),

  CONSTRAINT FK_MISSAO_MASMORRA FOREIGN KEY(MASMORRA)
    REFERENCES MASMORRA(NOME) ON DELETE CASCADE,

  CONSTRAINT CK_MISSAO_EXP_GERADO CHECK (EXP_GERADO >= 0),
  CONSTRAINT CK_MISSAO_DIFICULDADE CHECK(UPPER(DIFICULDADE) IN ('FACIL', 'MEDIA', 'DIFICIL', 'IMPOSSIVEL'))
);

CREATE TABLE ESPOLIO_MONSTRO(
  ITEM VARCHAR(64) NOT NULL,
  MONSTRO VARCHAR(64) NOT NULL,
  QUANTIDADE NUMERIC NOT NULL,

  CONSTRAINT PK_ESPOLIO_MONSTRO PRIMARY KEY(ITEM, MONSTRO),

  CONSTRAINT FK_ESPOLIO_MONSTRO_ITEM FOREIGN KEY (ITEM)
    REFERENCES ITEM(NOME) ON DELETE CASCADE,
  CONSTRAINT FK_ESPOLIO_MONSTRO_MONSTRO FOREIGN KEY (MONSTRO)
    REFERENCES MONSTRO(NOME) ON DELETE CASCADE,

  CONSTRAINT CK_ESPOLIO_QTT CHECK (QUANTIDADE > 0) --Checar se a quantidade de itens derrubados pelo monstro é positiva.
);

CREATE TABLE MONSTRO_MASMORRA (
  MONSTRO VARCHAR(64) NOT NULL,
  MASMORRA VARCHAR(64) NOT NULL,
  QUANTIDADE NUMERIC NOT NULL,

  CONSTRAINT PK_MONSTRO_MASMORRA PRIMARY KEY (MONSTRO, MASMORRA),

  CONSTRAINT FK_MONSTRO_MASMORRA_MONSTRO FOREIGN KEY (MONSTRO)
    REFERENCES MONSTRO(NOME) ON DELETE CASCADE,
  CONSTRAINT FK_MONSTRO_MASMORRA_MASMORRA FOREIGN KEY (MASMORRA)
    REFERENCES MASMORRA(NOME) ON DELETE CASCADE,

  CONSTRAINT CK_MONSTRO_MASMORRA_QTT CHECK (QUANTIDADE > 0) --Checar se a quantidade de monstros na masmorra é positiva.
);

CREATE TABLE ITENS_GERADOS_MISSAO (
  ITEM VARCHAR(64) NOT NULL,
  MISSAO VARCHAR(64) NOT NULL,
  QUANTIDADE NUMERIC NOT NULL,

  CONSTRAINT PK_ITENS_GERADOS_MISSAO PRIMARY KEY(ITEM, MISSAO),

  CONSTRAINT FK_ITENS_GERADOS_ITEM FOREIGN KEY(ITEM)
    REFERENCES ITEM(NOME) ON DELETE CASCADE,
  CONSTRAINT FK_ITENS_GERADOS_MISSAO FOREIGN KEY(MISSAO)
    REFERENCES MISSAO(NOME) ON DELETE CASCADE,

  CONSTRAINT CK_ITENS_GERADOS_QTT CHECK (QUANTIDADE > 0) --Checar se a quantidade de itens gerados pela missão é positiva.
);

CREATE TABLE COMUNIDADE_CARENTE (
  NOME VARCHAR(64),
  LOCAL VARCHAR(256) NOT NULL,
  PONTUACAO_TOTAL NUMERIC NOT NULL DEFAULT 0,

  CONSTRAINT PK_COMUNIDADE_CARENTE PRIMARY KEY (NOME)
);


CREATE TABLE CRIACAO_COMUNIDADE (
  MISSAO VARCHAR(64) NOT NULL,
  COMUNIDADE VARCHAR(64) NOT NULL,
  PONTUACAO NUMERIC NOT NULL,

  CONSTRAINT PK_CRIACAO_COMUNIDADE PRIMARY KEY(MISSAO),

  CONSTRAINT FK_CRIACAO_COMUNIDADE_MISSAO FOREIGN KEY(MISSAO)
    REFERENCES MISSAO(NOME) ON DELETE CASCADE,
  CONSTRAINT FK_CRIACAO_COMUNIDADE_COMUNIDADE FOREIGN KEY(COMUNIDADE)
    REFERENCES COMUNIDADE_CARENTE(NOME) ON DELETE CASCADE,

  CONSTRAINT CK_PONTUACAO CHECK (PONTUACAO >= 0) --Checar se a pontuação é não negativa.
);

CREATE TABLE PARTICIPACAO_MISSAO (
  MISSAO VARCHAR(64) NOT NULL,
  NACAO VARCHAR(32) NOT NULL,
  CLA VARCHAR(32) NOT NULL,
  DATA_TERMINO TIMESTAMP NOT NULL,
  FINALIZOU BOOLEAN DEFAULT FALSE,

  CONSTRAINT PK_PARTICIPACAO_MISSAO PRIMARY KEY(MISSAO, NACAO, CLA, DATA_TERMINO),

  CONSTRAINT FK_PARTICIPACAO_MISSAO_NACAO_CLA FOREIGN KEY(NACAO, CLA)
    REFERENCES CLA(NACAO, NOME) ON DELETE CASCADE,
  CONSTRAINT FK_PARTICIPACAO_MISSAO_MISSAO FOREIGN KEY(MISSAO)
    REFERENCES MISSAO(NOME) ON DELETE CASCADE
);

CREATE TABLE CONSUMIVEL (
  ITEM VARCHAR(64) NOT NULL,
  TEMPO_DURACAO INTERVAL HOUR TO SECOND NOT NULL,

  CONSTRAINT PK_CONSUMIVEL PRIMARY KEY(ITEM),

  CONSTRAINT FK_CONSUMIVEL_ITEM FOREIGN KEY(ITEM)
    REFERENCES ITEM(NOME) ON DELETE CASCADE
);

CREATE TABLE EFEITO_CONSUMIVEL (
  CONSUMIVEL VARCHAR(64) NOT NULL,
  NOME VARCHAR(64) NOT NULL,

  CONSTRAINT PK_EFEITO_CONSUMIVEL PRIMARY KEY(CONSUMIVEL, NOME),

  CONSTRAINT FK_EFEITO_CONSUMIVEL FOREIGN KEY(CONSUMIVEL)
    REFERENCES CONSUMIVEL(ITEM) ON DELETE CASCADE
);

CREATE TABLE EQUIPAMENTO (
  ITEM VARCHAR(64) NOT NULL,
  NIVEL_PERMITIDO NUMERIC NOT NULL,
  PONTOS_PODER NUMERIC NOT NULL,
  DE_GUERREIRO BOOLEAN NOT NULL DEFAULT FALSE,
  DE_MAGO BOOLEAN NOT NULL DEFAULT FALSE,
  DE_ATIRADOR BOOLEAN NOT NULL DEFAULT FALSE,
  DE_CURANDEIRO BOOLEAN NOT NULL DEFAULT FALSE,

  CONSTRAINT PK_EQUIPAMENTO PRIMARY KEY(ITEM),

  CONSTRAINT FK_EQUIPAMENTO_ITEM FOREIGN KEY(ITEM)
    REFERENCES ITEM(NOME) ON DELETE CASCADE,

  CONSTRAINT CK_EQUIPAMENTO_PONTOS_PODER CHECK (PONTOS_PODER >= 0) --Checar se o valor dos pontos de poder extra do equipamento é não negativo.
);

CREATE TABLE HABILIDADE_EQUIPAMENTO (
  EQUIPAMENTO VARCHAR(64) NOT NULL,
  NOME VARCHAR(64) NOT NULL,

  CONSTRAINT PK_HABILIDADE_EQUIPAMENTO PRIMARY KEY(EQUIPAMENTO, NOME),

  CONSTRAINT FK_HABILIDADE_EQUIPAMENTO FOREIGN KEY(EQUIPAMENTO)
    REFERENCES EQUIPAMENTO(ITEM) ON DELETE CASCADE
);

CREATE TABLE ALIANCA (
  NACAO1 VARCHAR(32),
  NACAO2 VARCHAR(32),

  CONSTRAINT PK_ALIANCA PRIMARY KEY (NACAO1, NACAO2),

  CONSTRAINT FK_ALIANCA_NACAO1 FOREIGN KEY(NACAO1)
    REFERENCES NACAO(NOME) ON DELETE CASCADE,
  CONSTRAINT FK_ALIANCA_NACAO2 FOREIGN KEY(NACAO2)
    REFERENCES NACAO(NOME) ON DELETE CASCADE,

  CONSTRAINT CK_ALIANCA_NACAO_IGUAL CHECK (NACAO1 > NACAO2) --Checar se uma nação é diferente da outra e se a ordem é consistente.
                                                            --Desta forma evita-se instâncias diferentes para a mesma aliança.
);

CREATE TABLE COMPRA_COM_DOACAO(
  PERSONAGEM INTEGER,
  ITEM VARCHAR(64),
  DATA TIMESTAMP DEFAULT NOW(),
  QUANTIDADE NUMERIC NOT NULL DEFAULT 1,

  CONSTRAINT PK_COMPRA_COM_DOACAO PRIMARY KEY (PERSONAGEM, ITEM, DATA),

  CONSTRAINT FK_COMPRA_COM_DOACAO_PERSONAGEM FOREIGN KEY (PERSONAGEM)
    REFERENCES PERSONAGEM(ID) ON DELETE CASCADE,
  CONSTRAINT FK_COMPRA_COM_DOACAO_ITEM FOREIGN KEY (ITEM)
    REFERENCES ITEM(NOME) ON DELETE CASCADE,

  CONSTRAINT CK_COMPRA_COM_DOACAO_QUANTIDADE CHECK (QUANTIDADE > 0) --Checar se a quantidade de items é positiva.
);

CREATE TABLE VENDA(
  ITEM VARCHAR(64),
  VENDEDOR INTEGER,
  COMPRADOR INTEGER,
  DATA DATE NOT NULL DEFAULT NOW(),
  VALOR_TOTAL NUMERIC NOT NULL,
  QUANTIDADE NUMERIC NOT NULL DEFAULT 1,

  CONSTRAINT PK_VENDA PRIMARY KEY (ITEM, VENDEDOR, COMPRADOR, DATA),

  CONSTRAINT FK_VENDA_VENDEDOR FOREIGN KEY (VENDEDOR)
    REFERENCES PERSONAGEM(ID) ON DELETE CASCADE,
  CONSTRAINT FK_VENDA_COMPRADOR FOREIGN KEY (COMPRADOR)
    REFERENCES PERSONAGEM(ID) ON DELETE CASCADE,
  CONSTRAINT FK_VENDA_ITEM FOREIGN KEY (ITEM)
    REFERENCES ITEM(NOME) ON DELETE CASCADE,

  CONSTRAINT CK_VENDA_QUANTIDADE CHECK (QUANTIDADE > 0) --Checar se a quantidade de items é positiva.
);

CREATE TABLE PERSONAGEM_POSSUI_ITENS(
  PERSONAGEM INTEGER,
  ITEM VARCHAR(64),
  QUANTIDADE NUMERIC NOT NULL DEFAULT 1,
  EQUIPADO BOOLEAN NOT NULL DEFAULT FALSE,

  CONSTRAINT PK_PERSONAGEM_POSSUI_ITENS PRIMARY KEY (PERSONAGEM, ITEM),

  CONSTRAINT FK_PERSONAGEM_POSSUI_ITENS_ITEM FOREIGN KEY (ITEM)
    REFERENCES ITEM(NOME) ON DELETE CASCADE,
  CONSTRAINT FK_PERSONAGEM_POSSUI_ITENS_PERSONAGEM FOREIGN KEY (PERSONAGEM)
    REFERENCES PERSONAGEM(ID) ON DELETE CASCADE,

  CONSTRAINT CK_PERSONAGEM_POSSUI_ITENS_QUANTIDADE CHECK (QUANTIDADE > 0) --Checar se a quantidade de items é positiva.
);

CREATE TABLE VOTA_EM_ALIANCA(
  PERSONAGEM INTEGER, --O tipo INTEGER é utilizado para armazenar o ID sintético de PERSONAGEM, que veio de um SERIAL.
  NACAO VARCHAR(32),
  FAVORAVEL BOOLEAN NOT NULL DEFAULT FALSE,

  CONSTRAINT PK_VOTA_EM_ALIANCA PRIMARY KEY (PERSONAGEM, NACAO),

  CONSTRAINT FK_VOTA_EM_ALIANCA_PERSONAGEM FOREIGN KEY (PERSONAGEM)
    REFERENCES PERSONAGEM(ID) ON DELETE CASCADE,
  CONSTRAINT FK_VOTA_EM_ALIANCA_NACAO FOREIGN KEY (NACAO)
    REFERENCES NACAO(NOME) ON DELETE CASCADE
);

CREATE TABLE TOPICO (
  ID SERIAL, --Criação de um ID sintético sequencial.
  CRIADOR VARCHAR(64) NOT NULL,
  TITULO VARCHAR(128) NOT NULL,
  DATA_DE_CRIACAO DATE NOT NULL DEFAULT NOW(),
  ASSUNTO TEXT,

  CONSTRAINT PK_TOPICO PRIMARY KEY (ID),
  CONSTRAINT SK_TOPICO UNIQUE(CRIADOR, TITULO, DATA_DE_CRIACAO),

  CONSTRAINT FK_TOPICO_USUARIO FOREIGN KEY(CRIADOR)
    REFERENCES USUARIO(NOME) ON DELETE RESTRICT
);

CREATE TABLE MENSAGEM (
  ID SERIAL,
  TOPICO INTEGER NOT NULL,
  CRIADOR VARCHAR(64) NOT NULL,
  DATA_DE_CRIACAO TIMESTAMP NOT NULL DEFAULT NOW(),
  MENSAGEM_RESPONDIDA INTEGER,
  NUMERO_DE_CURTIDAS NUMERIC NOT NULL DEFAULT 0,
  CONTEUDO TEXT NOT NULL,

  CONSTRAINT PK_MENSAGEM PRIMARY KEY (ID),
  CONSTRAINT SK_MENSAGEM UNIQUE(TOPICO, CRIADOR, DATA_DE_CRIACAO),

  CONSTRAINT FK_MENSAGEM_TOPICO FOREIGN KEY(TOPICO)
    REFERENCES TOPICO(ID) ON DELETE RESTRICT,
  CONSTRAINT FK_MENSAGEM_USUARIO FOREIGN KEY(CRIADOR)
    REFERENCES USUARIO(NOME) ON DELETE RESTRICT,
  CONSTRAINT FK_MENSAGEM_MENSAGEM FOREIGN KEY(MENSAGEM_RESPONDIDA)
    REFERENCES MENSAGEM(ID) ON DELETE SET NULL,

  CONSTRAINT CK_MENSAGEM_ID_MENSAGEM_RESPONDIDA CHECK ( ID <> MENSAGEM_RESPONDIDA ), --Checar se a pensagem não responde ela mesma.
  CONSTRAINT CK_MENSAGEM_NUMERO_DE_CURTIDAS CHECK ( NUMERO_DE_CURTIDAS >= 0 ) --Checar se o número de curtidadas é não negativo.
);

CREATE TABLE MODERADOR_OCULTA_MENSAGEM (
  MENSAGEM INTEGER,
  MODERADOR VARCHAR(64) NOT NULL,

  CONSTRAINT PK_MODERADOR_OCULTA_MENSAGEM PRIMARY KEY (MENSAGEM),

  CONSTRAINT FK_MODERADOR_OCULTA_MENSAGEM_MENSAGEM
    FOREIGN KEY(MENSAGEM) REFERENCES MENSAGEM(ID) ON DELETE RESTRICT,
  CONSTRAINT FK_MODERADOR_OCULTA_MENSAGEM_USUARIO
    FOREIGN KEY(MODERADOR) REFERENCES USUARIO(NOME) ON DELETE RESTRICT
);

CREATE TABLE DOACAO_PARA_COMUNIDADE (
  USUARIO VARCHAR(64),
  COMUNIDADE VARCHAR(64),
  DATA DATE NOT NULL DEFAULT NOW(), --Tipo DATE é utilizado para guardar apenas dia da doação, como especificado no trabalho.
  VALOR NUMERIC NOT NULL DEFAULT 0,

  CONSTRAINT PK_DOACAO_PARA_COMUNIDADE PRIMARY KEY(USUARIO, COMUNIDADE, DATA),

  CONSTRAINT FK_DOACAO_PARA_COMUNIDADE_USUARIO FOREIGN KEY (USUARIO)
    REFERENCES USUARIO(NOME) ON DELETE CASCADE,
  CONSTRAINT FK_DOACAO_PARA_COMUNIDADE_COMUNIDADE FOREIGN KEY (COMUNIDADE)
    REFERENCES COMUNIDADE_CARENTE(NOME) ON DELETE CASCADE,

  CONSTRAINT CK_DOACAO_PARA_COMUNIDADE_VALOR CHECK ( VALOR >= 0 ) --Checar se o valor da doação é não negativo.
);

CREATE TABLE EQUIPAMENTO_DOADO (
  USUARIO VARCHAR(64),
  COMUNIDADE VARCHAR(64),
  DATA DATE NOT NULL DEFAULT NOW(),
  NOME_DO_EQUIPAMENTO VARCHAR(64),

  CONSTRAINT PK_EQUIPAMENTO_DOADO PRIMARY KEY(USUARIO, COMUNIDADE, DATA, NOME_DO_EQUIPAMENTO),

  CONSTRAINT FK_EQUIPAMENTO_DOADO_DOACAO_PARA_COMUNIDADE FOREIGN KEY(USUARIO, COMUNIDADE, DATA)
    REFERENCES DOACAO_PARA_COMUNIDADE(USUARIO, COMUNIDADE, DATA) ON DELETE CASCADE
);
